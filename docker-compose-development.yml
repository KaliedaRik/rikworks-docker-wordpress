# To use this template:

# replace NAMESPACE with the namespace of your choice
# - should allow different wordpress projects to run on the same dockerised server/machine
# - (though that will also require changing the port that one of the projects listens on)

# for security, the WORDPRESS_ and MYSQL_ environment variables should be changed
# - except WORDPRESS_DB_HOST

# record the namespace used in the toolchain/environment.js file
# - any changes to the compose.yml filename also need to be recorded in environment.js

# invocation, from project root folder:
# $ docker-compose -f [compose-file].yml -d
# or even:
# $ docker-compose -f [compose-file] up -d --force-recreate --build

# (This is all handled automatically when using the toolchain/watch.js functionality)

version: '2'

services:
  wordpress-data:
    container_name: test1-wp-data
    build: ./dockerfiles/volume-wp
    image: test1-wp-data-image
    restart: never

  db-data:
    container_name: test1-db-data
    build: ./dockerfiles/volume-db
    image: test1-db-data-image
    restart: never

  db:
    container_name: test1-db
    build: ./dockerfiles/container-db
    image: test1-db-image
    restart: always
    volumes:
      - test1-db-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: wordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress

  wordpress:
    container_name: test1-wp
    depends_on:
      - db
    build: .
    image: test1-wp-image
    links:
      - db
    restart: always
    volumes:
      - test1-wp-data:/var/www/html
    ports:
      - "80:80"
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_PASSWORD: wordpress

volumes:
  test1-wp-data:
    external: false
  test1-db-data:
    external: false
